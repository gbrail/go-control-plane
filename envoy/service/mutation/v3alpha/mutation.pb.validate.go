// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: envoy/service/mutation/v3alpha/mutation.proto

package envoy_service_mutation_v3alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _mutation_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on MutationRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MutationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ResponseRequired

	if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MutationRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MutationRequestValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRequestBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MutationRequestValidationError{
				field:  "RequestBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetResponseBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MutationRequestValidationError{
				field:  "ResponseBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRequestTrailers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MutationRequestValidationError{
				field:  "RequestTrailers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetResponseTrailers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MutationRequestValidationError{
				field:  "ResponseTrailers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MutationRequestValidationError is the validation error returned by
// MutationRequest.Validate if the designated constraints aren't met.
type MutationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MutationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MutationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MutationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MutationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MutationRequestValidationError) ErrorName() string { return "MutationRequestValidationError" }

// Error satisfies the builtin error interface
func (e MutationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMutationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MutationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MutationRequestValidationError{}

// Validate checks the field values on StopCommand with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StopCommand) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// StopCommandValidationError is the validation error returned by
// StopCommand.Validate if the designated constraints aren't met.
type StopCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopCommandValidationError) ErrorName() string { return "StopCommandValidationError" }

// Error satisfies the builtin error interface
func (e StopCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopCommandValidationError{}

// Validate checks the field values on ContinueRequestCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ContinueRequestCommand) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ContinueRequestCommandValidationError is the validation error returned by
// ContinueRequestCommand.Validate if the designated constraints aren't met.
type ContinueRequestCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContinueRequestCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContinueRequestCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContinueRequestCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContinueRequestCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContinueRequestCommandValidationError) ErrorName() string {
	return "ContinueRequestCommandValidationError"
}

// Error satisfies the builtin error interface
func (e ContinueRequestCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContinueRequestCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContinueRequestCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContinueRequestCommandValidationError{}

// Validate checks the field values on ContinueResponseCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ContinueResponseCommand) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ContinueResponseCommandValidationError is the validation error returned by
// ContinueResponseCommand.Validate if the designated constraints aren't met.
type ContinueResponseCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContinueResponseCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContinueResponseCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContinueResponseCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContinueResponseCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContinueResponseCommandValidationError) ErrorName() string {
	return "ContinueResponseCommandValidationError"
}

// Error satisfies the builtin error interface
func (e ContinueResponseCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContinueResponseCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContinueResponseCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContinueResponseCommandValidationError{}

// Validate checks the field values on SendRequestBodyChunkCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendRequestBodyChunkCommand) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SendRequestBodyChunkCommandValidationError is the validation error returned
// by SendRequestBodyChunkCommand.Validate if the designated constraints
// aren't met.
type SendRequestBodyChunkCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendRequestBodyChunkCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendRequestBodyChunkCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendRequestBodyChunkCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendRequestBodyChunkCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendRequestBodyChunkCommandValidationError) ErrorName() string {
	return "SendRequestBodyChunkCommandValidationError"
}

// Error satisfies the builtin error interface
func (e SendRequestBodyChunkCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendRequestBodyChunkCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendRequestBodyChunkCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendRequestBodyChunkCommandValidationError{}

// Validate checks the field values on SendResponseBodyChunkCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendResponseBodyChunkCommand) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SendResponseBodyChunkCommandValidationError is the validation error returned
// by SendResponseBodyChunkCommand.Validate if the designated constraints
// aren't met.
type SendResponseBodyChunkCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendResponseBodyChunkCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendResponseBodyChunkCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendResponseBodyChunkCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendResponseBodyChunkCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendResponseBodyChunkCommandValidationError) ErrorName() string {
	return "SendResponseBodyChunkCommandValidationError"
}

// Error satisfies the builtin error interface
func (e SendResponseBodyChunkCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendResponseBodyChunkCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendResponseBodyChunkCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendResponseBodyChunkCommandValidationError{}

// Validate checks the field values on SendBufferedRequestBodyCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendBufferedRequestBodyCommand) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SendBufferedRequestBodyCommandValidationError is the validation error
// returned by SendBufferedRequestBodyCommand.Validate if the designated
// constraints aren't met.
type SendBufferedRequestBodyCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendBufferedRequestBodyCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendBufferedRequestBodyCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendBufferedRequestBodyCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendBufferedRequestBodyCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendBufferedRequestBodyCommandValidationError) ErrorName() string {
	return "SendBufferedRequestBodyCommandValidationError"
}

// Error satisfies the builtin error interface
func (e SendBufferedRequestBodyCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendBufferedRequestBodyCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendBufferedRequestBodyCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendBufferedRequestBodyCommandValidationError{}

// Validate checks the field values on SendBufferedResponseBodyCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendBufferedResponseBodyCommand) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SendBufferedResponseBodyCommandValidationError is the validation error
// returned by SendBufferedResponseBodyCommand.Validate if the designated
// constraints aren't met.
type SendBufferedResponseBodyCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendBufferedResponseBodyCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendBufferedResponseBodyCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendBufferedResponseBodyCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendBufferedResponseBodyCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendBufferedResponseBodyCommandValidationError) ErrorName() string {
	return "SendBufferedResponseBodyCommandValidationError"
}

// Error satisfies the builtin error interface
func (e SendBufferedResponseBodyCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendBufferedResponseBodyCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendBufferedResponseBodyCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendBufferedResponseBodyCommandValidationError{}

// Validate checks the field values on SendRequestTrailersCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendRequestTrailersCommand) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SendRequestTrailersCommandValidationError is the validation error returned
// by SendRequestTrailersCommand.Validate if the designated constraints aren't met.
type SendRequestTrailersCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendRequestTrailersCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendRequestTrailersCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendRequestTrailersCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendRequestTrailersCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendRequestTrailersCommandValidationError) ErrorName() string {
	return "SendRequestTrailersCommandValidationError"
}

// Error satisfies the builtin error interface
func (e SendRequestTrailersCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendRequestTrailersCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendRequestTrailersCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendRequestTrailersCommandValidationError{}

// Validate checks the field values on SendResponseTrailersCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendResponseTrailersCommand) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SendResponseTrailersCommandValidationError is the validation error returned
// by SendResponseTrailersCommand.Validate if the designated constraints
// aren't met.
type SendResponseTrailersCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendResponseTrailersCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendResponseTrailersCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendResponseTrailersCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendResponseTrailersCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendResponseTrailersCommandValidationError) ErrorName() string {
	return "SendResponseTrailersCommandValidationError"
}

// Error satisfies the builtin error interface
func (e SendResponseTrailersCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendResponseTrailersCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendResponseTrailersCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendResponseTrailersCommandValidationError{}

// Validate checks the field values on MutationResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MutationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCompleteResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MutationResponseValidationError{
				field:  "CompleteResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSetHeaders() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MutationResponseValidationError{
					field:  fmt.Sprintf("SetHeaders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetBodyMutation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MutationResponseValidationError{
				field:  "BodyMutation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNewMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MutationResponseValidationError{
				field:  "NewMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAsyncModeChange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MutationResponseValidationError{
				field:  "AsyncModeChange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Command.(type) {

	case *MutationResponse_Stop:

		if v, ok := interface{}(m.GetStop()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MutationResponseValidationError{
					field:  "Stop",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MutationResponse_ContinueRequest:

		if v, ok := interface{}(m.GetContinueRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MutationResponseValidationError{
					field:  "ContinueRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MutationResponse_ContinueResponse:

		if v, ok := interface{}(m.GetContinueResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MutationResponseValidationError{
					field:  "ContinueResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MutationResponse_SendRequestBodyChunk:

		if v, ok := interface{}(m.GetSendRequestBodyChunk()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MutationResponseValidationError{
					field:  "SendRequestBodyChunk",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MutationResponse_SendResponseBodyChunk:

		if v, ok := interface{}(m.GetSendResponseBodyChunk()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MutationResponseValidationError{
					field:  "SendResponseBodyChunk",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MutationResponse_SendBufferedRequestBody:

		if v, ok := interface{}(m.GetSendBufferedRequestBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MutationResponseValidationError{
					field:  "SendBufferedRequestBody",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MutationResponse_SendBufferedResponseBody:

		if v, ok := interface{}(m.GetSendBufferedResponseBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MutationResponseValidationError{
					field:  "SendBufferedResponseBody",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MutationResponse_SendRequestTrailers:

		if v, ok := interface{}(m.GetSendRequestTrailers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MutationResponseValidationError{
					field:  "SendRequestTrailers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MutationResponse_SendResponseTrailers:

		if v, ok := interface{}(m.GetSendResponseTrailers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MutationResponseValidationError{
					field:  "SendResponseTrailers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return MutationResponseValidationError{
			field:  "Command",
			reason: "value is required",
		}

	}

	return nil
}

// MutationResponseValidationError is the validation error returned by
// MutationResponse.Validate if the designated constraints aren't met.
type MutationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MutationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MutationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MutationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MutationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MutationResponseValidationError) ErrorName() string { return "MutationResponseValidationError" }

// Error satisfies the builtin error interface
func (e MutationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMutationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MutationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MutationResponseValidationError{}

// Validate checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Method

	if v, ok := interface{}(m.GetHeaders()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestValidationError{
				field:  "Headers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Path

	// no validation rules for Host

	// no validation rules for Scheme

	if v, ok := interface{}(m.GetClientInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestValidationError{
				field:  "ClientInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetProperties() {
		_ = val

		// no validation rules for Properties[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestValidationError{
					field:  fmt.Sprintf("Properties[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RequestValidationError is the validation error returned by Request.Validate
// if the designated constraints aren't met.
type RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestValidationError) ErrorName() string { return "RequestValidationError" }

// Error satisfies the builtin error interface
func (e RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for StatusCode

	if v, ok := interface{}(m.GetHeaders()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseValidationError{
				field:  "Headers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDestinationInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseValidationError{
				field:  "DestinationInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetProperties() {
		_ = val

		// no validation rules for Properties[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseValidationError{
					field:  fmt.Sprintf("Properties[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on Body with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Body) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Body

	// no validation rules for EndOfStream

	return nil
}

// BodyValidationError is the validation error returned by Body.Validate if the
// designated constraints aren't met.
type BodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BodyValidationError) ErrorName() string { return "BodyValidationError" }

// Error satisfies the builtin error interface
func (e BodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BodyValidationError{}

// Validate checks the field values on CompleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CompleteResponse) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetStatus() == nil {
		return CompleteResponseValidationError{
			field:  "Status",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompleteResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetHeaders() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompleteResponseValidationError{
					field:  fmt.Sprintf("Headers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Body

	for idx, item := range m.GetTrailers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompleteResponseValidationError{
					field:  fmt.Sprintf("Trailers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CompleteResponseValidationError is the validation error returned by
// CompleteResponse.Validate if the designated constraints aren't met.
type CompleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteResponseValidationError) ErrorName() string { return "CompleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e CompleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteResponseValidationError{}

// Validate checks the field values on BodyMutation with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BodyMutation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Offset

	// no validation rules for Length

	// no validation rules for Body

	return nil
}

// BodyMutationValidationError is the validation error returned by
// BodyMutation.Validate if the designated constraints aren't met.
type BodyMutationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BodyMutationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BodyMutationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BodyMutationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BodyMutationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BodyMutationValidationError) ErrorName() string { return "BodyMutationValidationError" }

// Error satisfies the builtin error interface
func (e BodyMutationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBodyMutation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BodyMutationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BodyMutationValidationError{}

// Validate checks the field values on ProcessingModeChange with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProcessingModeChange) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAsyncMode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessingModeChangeValidationError{
				field:  "AsyncMode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessingModeChangeValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProcessingModeChangeValidationError is the validation error returned by
// ProcessingModeChange.Validate if the designated constraints aren't met.
type ProcessingModeChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessingModeChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessingModeChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessingModeChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessingModeChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessingModeChangeValidationError) ErrorName() string {
	return "ProcessingModeChangeValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessingModeChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessingModeChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessingModeChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessingModeChangeValidationError{}
