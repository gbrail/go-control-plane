// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.10.1
// source: envoy/service/mutation/v3alpha/mutation.proto

package envoy_service_mutation_v3alpha

import (
	context "context"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	v3alpha "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/mutation/v3alpha"
	v31 "github.com/envoyproxy/go-control-plane/envoy/service/auth/v3"
	v32 "github.com/envoyproxy/go-control-plane/envoy/type/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MutationResponse_Command int32

const (
	MutationResponse_STOP                     MutationResponse_Command = 0
	MutationResponse_CONTINUE_REQUEST         MutationResponse_Command = 1
	MutationResponse_CONTINUE_RESPONSE        MutationResponse_Command = 2
	MutationResponse_SEND_REQUEST_BODY_CHUNK  MutationResponse_Command = 3
	MutationResponse_SEND_RESPONSE_BODY_CHUNK MutationResponse_Command = 4
	MutationResponse_SEND_REQUEST_BODY        MutationResponse_Command = 5
	MutationResponse_SEND_RESPONSE_BODY       MutationResponse_Command = 6
	MutationResponse_SEND_REQUEST_TRAILERS    MutationResponse_Command = 7
	MutationResponse_SEND_RESPONSE_TRAILERS   MutationResponse_Command = 8
)

// Enum value maps for MutationResponse_Command.
var (
	MutationResponse_Command_name = map[int32]string{
		0: "STOP",
		1: "CONTINUE_REQUEST",
		2: "CONTINUE_RESPONSE",
		3: "SEND_REQUEST_BODY_CHUNK",
		4: "SEND_RESPONSE_BODY_CHUNK",
		5: "SEND_REQUEST_BODY",
		6: "SEND_RESPONSE_BODY",
		7: "SEND_REQUEST_TRAILERS",
		8: "SEND_RESPONSE_TRAILERS",
	}
	MutationResponse_Command_value = map[string]int32{
		"STOP":                     0,
		"CONTINUE_REQUEST":         1,
		"CONTINUE_RESPONSE":        2,
		"SEND_REQUEST_BODY_CHUNK":  3,
		"SEND_RESPONSE_BODY_CHUNK": 4,
		"SEND_REQUEST_BODY":        5,
		"SEND_RESPONSE_BODY":       6,
		"SEND_REQUEST_TRAILERS":    7,
		"SEND_RESPONSE_TRAILERS":   8,
	}
)

func (x MutationResponse_Command) Enum() *MutationResponse_Command {
	p := new(MutationResponse_Command)
	*p = x
	return p
}

func (x MutationResponse_Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MutationResponse_Command) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_service_mutation_v3alpha_mutation_proto_enumTypes[0].Descriptor()
}

func (MutationResponse_Command) Type() protoreflect.EnumType {
	return &file_envoy_service_mutation_v3alpha_mutation_proto_enumTypes[0]
}

func (x MutationResponse_Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MutationResponse_Command.Descriptor instead.
func (MutationResponse_Command) EnumDescriptor() ([]byte, []int) {
	return file_envoy_service_mutation_v3alpha_mutation_proto_rawDescGZIP(), []int{1, 0}
}

type MutationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to R:
	//	*MutationRequest_ResponseRequired
	//	*MutationRequest_Request
	//	*MutationRequest_Response
	//	*MutationRequest_RequestBody
	//	*MutationRequest_ResponseBody
	//	*MutationRequest_RequestTrailers
	//	*MutationRequest_ResponseTrailers
	R isMutationRequest_R `protobuf_oneof:"r"`
}

func (x *MutationRequest) Reset() {
	*x = MutationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutationRequest) ProtoMessage() {}

func (x *MutationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutationRequest.ProtoReflect.Descriptor instead.
func (*MutationRequest) Descriptor() ([]byte, []int) {
	return file_envoy_service_mutation_v3alpha_mutation_proto_rawDescGZIP(), []int{0}
}

func (m *MutationRequest) GetR() isMutationRequest_R {
	if m != nil {
		return m.R
	}
	return nil
}

func (x *MutationRequest) GetResponseRequired() bool {
	if x, ok := x.GetR().(*MutationRequest_ResponseRequired); ok {
		return x.ResponseRequired
	}
	return false
}

func (x *MutationRequest) GetRequest() *Request {
	if x, ok := x.GetR().(*MutationRequest_Request); ok {
		return x.Request
	}
	return nil
}

func (x *MutationRequest) GetResponse() *Response {
	if x, ok := x.GetR().(*MutationRequest_Response); ok {
		return x.Response
	}
	return nil
}

func (x *MutationRequest) GetRequestBody() *Body {
	if x, ok := x.GetR().(*MutationRequest_RequestBody); ok {
		return x.RequestBody
	}
	return nil
}

func (x *MutationRequest) GetResponseBody() *Body {
	if x, ok := x.GetR().(*MutationRequest_ResponseBody); ok {
		return x.ResponseBody
	}
	return nil
}

func (x *MutationRequest) GetRequestTrailers() *v3.HeaderMap {
	if x, ok := x.GetR().(*MutationRequest_RequestTrailers); ok {
		return x.RequestTrailers
	}
	return nil
}

func (x *MutationRequest) GetResponseTrailers() *v3.HeaderMap {
	if x, ok := x.GetR().(*MutationRequest_ResponseTrailers); ok {
		return x.ResponseTrailers
	}
	return nil
}

type isMutationRequest_R interface {
	isMutationRequest_R()
}

type MutationRequest_ResponseRequired struct {
	ResponseRequired bool `protobuf:"varint,1,opt,name=response_required,json=responseRequired,proto3,oneof"`
}

type MutationRequest_Request struct {
	Request *Request `protobuf:"bytes,2,opt,name=request,proto3,oneof"`
}

type MutationRequest_Response struct {
	Response *Response `protobuf:"bytes,3,opt,name=response,proto3,oneof"`
}

type MutationRequest_RequestBody struct {
	RequestBody *Body `protobuf:"bytes,4,opt,name=request_body,json=requestBody,proto3,oneof"`
}

type MutationRequest_ResponseBody struct {
	ResponseBody *Body `protobuf:"bytes,5,opt,name=response_body,json=responseBody,proto3,oneof"`
}

type MutationRequest_RequestTrailers struct {
	RequestTrailers *v3.HeaderMap `protobuf:"bytes,6,opt,name=request_trailers,json=requestTrailers,proto3,oneof"`
}

type MutationRequest_ResponseTrailers struct {
	ResponseTrailers *v3.HeaderMap `protobuf:"bytes,7,opt,name=response_trailers,json=responseTrailers,proto3,oneof"`
}

func (*MutationRequest_ResponseRequired) isMutationRequest_R() {}

func (*MutationRequest_Request) isMutationRequest_R() {}

func (*MutationRequest_Response) isMutationRequest_R() {}

func (*MutationRequest_RequestBody) isMutationRequest_R() {}

func (*MutationRequest_ResponseBody) isMutationRequest_R() {}

func (*MutationRequest_RequestTrailers) isMutationRequest_R() {}

func (*MutationRequest_ResponseTrailers) isMutationRequest_R() {}

type MutationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command          MutationResponse_Command `protobuf:"varint,1,opt,name=command,proto3,enum=envoy.service.mutation.v3alpha.MutationResponse_Command" json:"command,omitempty"`
	CompleteResponse *CompleteResponse        `protobuf:"bytes,2,opt,name=complete_response,json=completeResponse,proto3" json:"complete_response,omitempty"`
	SetHeaders       []*v3.HeaderValueOption  `protobuf:"bytes,3,rep,name=set_headers,json=setHeaders,proto3" json:"set_headers,omitempty"`
	RemoveHeaders    []string                 `protobuf:"bytes,4,rep,name=remove_headers,json=removeHeaders,proto3" json:"remove_headers,omitempty"`
	BodyMutation     *BodyMutation            `protobuf:"bytes,5,opt,name=body_mutation,json=bodyMutation,proto3" json:"body_mutation,omitempty"`
	NewMetadata      *_struct.Struct          `protobuf:"bytes,6,opt,name=new_metadata,json=newMetadata,proto3" json:"new_metadata,omitempty"`
	AsyncModeChange  *ProcessingModeChange    `protobuf:"bytes,7,opt,name=async_mode_change,json=asyncModeChange,proto3" json:"async_mode_change,omitempty"`
}

func (x *MutationResponse) Reset() {
	*x = MutationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutationResponse) ProtoMessage() {}

func (x *MutationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutationResponse.ProtoReflect.Descriptor instead.
func (*MutationResponse) Descriptor() ([]byte, []int) {
	return file_envoy_service_mutation_v3alpha_mutation_proto_rawDescGZIP(), []int{1}
}

func (x *MutationResponse) GetCommand() MutationResponse_Command {
	if x != nil {
		return x.Command
	}
	return MutationResponse_STOP
}

func (x *MutationResponse) GetCompleteResponse() *CompleteResponse {
	if x != nil {
		return x.CompleteResponse
	}
	return nil
}

func (x *MutationResponse) GetSetHeaders() []*v3.HeaderValueOption {
	if x != nil {
		return x.SetHeaders
	}
	return nil
}

func (x *MutationResponse) GetRemoveHeaders() []string {
	if x != nil {
		return x.RemoveHeaders
	}
	return nil
}

func (x *MutationResponse) GetBodyMutation() *BodyMutation {
	if x != nil {
		return x.BodyMutation
	}
	return nil
}

func (x *MutationResponse) GetNewMetadata() *_struct.Struct {
	if x != nil {
		return x.NewMetadata
	}
	return nil
}

func (x *MutationResponse) GetAsyncModeChange() *ProcessingModeChange {
	if x != nil {
		return x.AsyncModeChange
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Method     string                     `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Headers    *v3.HeaderMap              `protobuf:"bytes,3,opt,name=headers,proto3" json:"headers,omitempty"`
	Path       string                     `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Host       string                     `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	Scheme     string                     `protobuf:"bytes,6,opt,name=scheme,proto3" json:"scheme,omitempty"`
	ClientInfo *v31.AttributeContext_Peer `protobuf:"bytes,7,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	Properties map[string]*_struct.Struct `protobuf:"bytes,8,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_envoy_service_mutation_v3alpha_mutation_proto_rawDescGZIP(), []int{2}
}

func (x *Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Request) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Request) GetHeaders() *v3.HeaderMap {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Request) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Request) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Request) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *Request) GetClientInfo() *v31.AttributeContext_Peer {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *Request) GetProperties() map[string]*_struct.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StatusCode      int32                      `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Headers         *v3.HeaderMap              `protobuf:"bytes,3,opt,name=headers,proto3" json:"headers,omitempty"`
	DestinationInfo *v31.AttributeContext_Peer `protobuf:"bytes,4,opt,name=destination_info,json=destinationInfo,proto3" json:"destination_info,omitempty"`
	Properties      map[string]*_struct.Struct `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_envoy_service_mutation_v3alpha_mutation_proto_rawDescGZIP(), []int{3}
}

func (x *Response) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Response) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Response) GetHeaders() *v3.HeaderMap {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Response) GetDestinationInfo() *v31.AttributeContext_Peer {
	if x != nil {
		return x.DestinationInfo
	}
	return nil
}

func (x *Response) GetProperties() map[string]*_struct.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body        []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	EndOfStream bool   `protobuf:"varint,2,opt,name=end_of_stream,json=endOfStream,proto3" json:"end_of_stream,omitempty"`
}

func (x *Body) Reset() {
	*x = Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body) ProtoMessage() {}

func (x *Body) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body.ProtoReflect.Descriptor instead.
func (*Body) Descriptor() ([]byte, []int) {
	return file_envoy_service_mutation_v3alpha_mutation_proto_rawDescGZIP(), []int{4}
}

func (x *Body) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Body) GetEndOfStream() bool {
	if x != nil {
		return x.EndOfStream
	}
	return false
}

type CompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *v32.HttpStatus   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Headers  []*v3.HeaderValue `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	Body     []byte            `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Trailers []*v3.HeaderValue `protobuf:"bytes,4,rep,name=trailers,proto3" json:"trailers,omitempty"`
}

func (x *CompleteResponse) Reset() {
	*x = CompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteResponse) ProtoMessage() {}

func (x *CompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteResponse.ProtoReflect.Descriptor instead.
func (*CompleteResponse) Descriptor() ([]byte, []int) {
	return file_envoy_service_mutation_v3alpha_mutation_proto_rawDescGZIP(), []int{5}
}

func (x *CompleteResponse) GetStatus() *v32.HttpStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CompleteResponse) GetHeaders() []*v3.HeaderValue {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *CompleteResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *CompleteResponse) GetTrailers() []*v3.HeaderValue {
	if x != nil {
		return x.Trailers
	}
	return nil
}

type BodyMutation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Length int32  `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	Body   []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *BodyMutation) Reset() {
	*x = BodyMutation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyMutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyMutation) ProtoMessage() {}

func (x *BodyMutation) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyMutation.ProtoReflect.Descriptor instead.
func (*BodyMutation) Descriptor() ([]byte, []int) {
	return file_envoy_service_mutation_v3alpha_mutation_proto_rawDescGZIP(), []int{6}
}

func (x *BodyMutation) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *BodyMutation) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *BodyMutation) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type ProcessingModeChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsyncMode *v3alpha.ProcessingMode `protobuf:"bytes,1,opt,name=async_mode,json=asyncMode,proto3" json:"async_mode,omitempty"`
	Duration  *duration.Duration      `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *ProcessingModeChange) Reset() {
	*x = ProcessingModeChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingModeChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingModeChange) ProtoMessage() {}

func (x *ProcessingModeChange) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingModeChange.ProtoReflect.Descriptor instead.
func (*ProcessingModeChange) Descriptor() ([]byte, []int) {
	return file_envoy_service_mutation_v3alpha_mutation_proto_rawDescGZIP(), []int{7}
}

func (x *ProcessingModeChange) GetAsyncMode() *v3alpha.ProcessingMode {
	if x != nil {
		return x.AsyncMode
	}
	return nil
}

func (x *ProcessingModeChange) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

var File_envoy_service_mutation_v3alpha_mutation_proto protoreflect.FileDescriptor

var file_envoy_service_mutation_v3alpha_mutation_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a,
	0x1f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x44, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f,
	0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x76, 0x33, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x64, 0x70, 0x61, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x04, 0x0a,
	0x0f, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x43, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4b, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x4c, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x48,
	0x00, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65,
	0x72, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x48, 0x00,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65,
	0x72, 0x73, 0x42, 0x03, 0x0a, 0x01, 0x72, 0x22, 0x95, 0x06, 0x0a, 0x10, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x5d, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x73, 0x65, 0x74,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x6e, 0x65,
	0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x11, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x49,
	0x4e, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42,
	0x4f, 0x44, 0x59, 0x5f, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x42, 0x4f, 0x44,
	0x59, 0x5f, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x4e,
	0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x05,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x4e, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x45, 0x52,
	0x53, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x53, 0x10, 0x08, 0x22,
	0xac, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x4d,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x56, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81,
	0x03, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x58, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x56, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3e, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x22,
	0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x22, 0xdf, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x3d, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x73, 0x22, 0x52, 0x0a, 0x0c, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x7d, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x06, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x52, 0x0a, 0x2c, 0x69, 0x6f, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0d, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x88, 0x01, 0x01, 0xba, 0x80, 0xc8, 0xd1, 0x06, 0x02,
	0x08, 0x01, 0xba, 0x80, 0xc8, 0xd1, 0x06, 0x02, 0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_envoy_service_mutation_v3alpha_mutation_proto_rawDescOnce sync.Once
	file_envoy_service_mutation_v3alpha_mutation_proto_rawDescData = file_envoy_service_mutation_v3alpha_mutation_proto_rawDesc
)

func file_envoy_service_mutation_v3alpha_mutation_proto_rawDescGZIP() []byte {
	file_envoy_service_mutation_v3alpha_mutation_proto_rawDescOnce.Do(func() {
		file_envoy_service_mutation_v3alpha_mutation_proto_rawDescData = protoimpl.X.CompressGZIP(file_envoy_service_mutation_v3alpha_mutation_proto_rawDescData)
	})
	return file_envoy_service_mutation_v3alpha_mutation_proto_rawDescData
}

var file_envoy_service_mutation_v3alpha_mutation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_envoy_service_mutation_v3alpha_mutation_proto_goTypes = []interface{}{
	(MutationResponse_Command)(0),     // 0: envoy.service.mutation.v3alpha.MutationResponse.Command
	(*MutationRequest)(nil),           // 1: envoy.service.mutation.v3alpha.MutationRequest
	(*MutationResponse)(nil),          // 2: envoy.service.mutation.v3alpha.MutationResponse
	(*Request)(nil),                   // 3: envoy.service.mutation.v3alpha.Request
	(*Response)(nil),                  // 4: envoy.service.mutation.v3alpha.Response
	(*Body)(nil),                      // 5: envoy.service.mutation.v3alpha.Body
	(*CompleteResponse)(nil),          // 6: envoy.service.mutation.v3alpha.CompleteResponse
	(*BodyMutation)(nil),              // 7: envoy.service.mutation.v3alpha.BodyMutation
	(*ProcessingModeChange)(nil),      // 8: envoy.service.mutation.v3alpha.ProcessingModeChange
	nil,                               // 9: envoy.service.mutation.v3alpha.Request.PropertiesEntry
	nil,                               // 10: envoy.service.mutation.v3alpha.Response.PropertiesEntry
	(*v3.HeaderMap)(nil),              // 11: envoy.config.core.v3.HeaderMap
	(*v3.HeaderValueOption)(nil),      // 12: envoy.config.core.v3.HeaderValueOption
	(*_struct.Struct)(nil),            // 13: google.protobuf.Struct
	(*v31.AttributeContext_Peer)(nil), // 14: envoy.service.auth.v3.AttributeContext.Peer
	(*v32.HttpStatus)(nil),            // 15: envoy.type.v3.HttpStatus
	(*v3.HeaderValue)(nil),            // 16: envoy.config.core.v3.HeaderValue
	(*v3alpha.ProcessingMode)(nil),    // 17: envoy.extensions.filters.http.mutation.v3alpha.ProcessingMode
	(*duration.Duration)(nil),         // 18: google.protobuf.Duration
}
var file_envoy_service_mutation_v3alpha_mutation_proto_depIdxs = []int32{
	3,  // 0: envoy.service.mutation.v3alpha.MutationRequest.request:type_name -> envoy.service.mutation.v3alpha.Request
	4,  // 1: envoy.service.mutation.v3alpha.MutationRequest.response:type_name -> envoy.service.mutation.v3alpha.Response
	5,  // 2: envoy.service.mutation.v3alpha.MutationRequest.request_body:type_name -> envoy.service.mutation.v3alpha.Body
	5,  // 3: envoy.service.mutation.v3alpha.MutationRequest.response_body:type_name -> envoy.service.mutation.v3alpha.Body
	11, // 4: envoy.service.mutation.v3alpha.MutationRequest.request_trailers:type_name -> envoy.config.core.v3.HeaderMap
	11, // 5: envoy.service.mutation.v3alpha.MutationRequest.response_trailers:type_name -> envoy.config.core.v3.HeaderMap
	0,  // 6: envoy.service.mutation.v3alpha.MutationResponse.command:type_name -> envoy.service.mutation.v3alpha.MutationResponse.Command
	6,  // 7: envoy.service.mutation.v3alpha.MutationResponse.complete_response:type_name -> envoy.service.mutation.v3alpha.CompleteResponse
	12, // 8: envoy.service.mutation.v3alpha.MutationResponse.set_headers:type_name -> envoy.config.core.v3.HeaderValueOption
	7,  // 9: envoy.service.mutation.v3alpha.MutationResponse.body_mutation:type_name -> envoy.service.mutation.v3alpha.BodyMutation
	13, // 10: envoy.service.mutation.v3alpha.MutationResponse.new_metadata:type_name -> google.protobuf.Struct
	8,  // 11: envoy.service.mutation.v3alpha.MutationResponse.async_mode_change:type_name -> envoy.service.mutation.v3alpha.ProcessingModeChange
	11, // 12: envoy.service.mutation.v3alpha.Request.headers:type_name -> envoy.config.core.v3.HeaderMap
	14, // 13: envoy.service.mutation.v3alpha.Request.client_info:type_name -> envoy.service.auth.v3.AttributeContext.Peer
	9,  // 14: envoy.service.mutation.v3alpha.Request.properties:type_name -> envoy.service.mutation.v3alpha.Request.PropertiesEntry
	11, // 15: envoy.service.mutation.v3alpha.Response.headers:type_name -> envoy.config.core.v3.HeaderMap
	14, // 16: envoy.service.mutation.v3alpha.Response.destination_info:type_name -> envoy.service.auth.v3.AttributeContext.Peer
	10, // 17: envoy.service.mutation.v3alpha.Response.properties:type_name -> envoy.service.mutation.v3alpha.Response.PropertiesEntry
	15, // 18: envoy.service.mutation.v3alpha.CompleteResponse.status:type_name -> envoy.type.v3.HttpStatus
	16, // 19: envoy.service.mutation.v3alpha.CompleteResponse.headers:type_name -> envoy.config.core.v3.HeaderValue
	16, // 20: envoy.service.mutation.v3alpha.CompleteResponse.trailers:type_name -> envoy.config.core.v3.HeaderValue
	17, // 21: envoy.service.mutation.v3alpha.ProcessingModeChange.async_mode:type_name -> envoy.extensions.filters.http.mutation.v3alpha.ProcessingMode
	18, // 22: envoy.service.mutation.v3alpha.ProcessingModeChange.duration:type_name -> google.protobuf.Duration
	13, // 23: envoy.service.mutation.v3alpha.Request.PropertiesEntry.value:type_name -> google.protobuf.Struct
	13, // 24: envoy.service.mutation.v3alpha.Response.PropertiesEntry.value:type_name -> google.protobuf.Struct
	1,  // 25: envoy.service.mutation.v3alpha.Mutation.Mutate:input_type -> envoy.service.mutation.v3alpha.MutationRequest
	2,  // 26: envoy.service.mutation.v3alpha.Mutation.Mutate:output_type -> envoy.service.mutation.v3alpha.MutationResponse
	26, // [26:27] is the sub-list for method output_type
	25, // [25:26] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_envoy_service_mutation_v3alpha_mutation_proto_init() }
func file_envoy_service_mutation_v3alpha_mutation_proto_init() {
	if File_envoy_service_mutation_v3alpha_mutation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyMutation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessingModeChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MutationRequest_ResponseRequired)(nil),
		(*MutationRequest_Request)(nil),
		(*MutationRequest_Response)(nil),
		(*MutationRequest_RequestBody)(nil),
		(*MutationRequest_ResponseBody)(nil),
		(*MutationRequest_RequestTrailers)(nil),
		(*MutationRequest_ResponseTrailers)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_envoy_service_mutation_v3alpha_mutation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_envoy_service_mutation_v3alpha_mutation_proto_goTypes,
		DependencyIndexes: file_envoy_service_mutation_v3alpha_mutation_proto_depIdxs,
		EnumInfos:         file_envoy_service_mutation_v3alpha_mutation_proto_enumTypes,
		MessageInfos:      file_envoy_service_mutation_v3alpha_mutation_proto_msgTypes,
	}.Build()
	File_envoy_service_mutation_v3alpha_mutation_proto = out.File
	file_envoy_service_mutation_v3alpha_mutation_proto_rawDesc = nil
	file_envoy_service_mutation_v3alpha_mutation_proto_goTypes = nil
	file_envoy_service_mutation_v3alpha_mutation_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MutationClient is the client API for Mutation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MutationClient interface {
	Mutate(ctx context.Context, opts ...grpc.CallOption) (Mutation_MutateClient, error)
}

type mutationClient struct {
	cc grpc.ClientConnInterface
}

func NewMutationClient(cc grpc.ClientConnInterface) MutationClient {
	return &mutationClient{cc}
}

func (c *mutationClient) Mutate(ctx context.Context, opts ...grpc.CallOption) (Mutation_MutateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Mutation_serviceDesc.Streams[0], "/envoy.service.mutation.v3alpha.Mutation/Mutate", opts...)
	if err != nil {
		return nil, err
	}
	x := &mutationMutateClient{stream}
	return x, nil
}

type Mutation_MutateClient interface {
	Send(*MutationRequest) error
	Recv() (*MutationResponse, error)
	grpc.ClientStream
}

type mutationMutateClient struct {
	grpc.ClientStream
}

func (x *mutationMutateClient) Send(m *MutationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mutationMutateClient) Recv() (*MutationResponse, error) {
	m := new(MutationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MutationServer is the server API for Mutation service.
type MutationServer interface {
	Mutate(Mutation_MutateServer) error
}

// UnimplementedMutationServer can be embedded to have forward compatible implementations.
type UnimplementedMutationServer struct {
}

func (*UnimplementedMutationServer) Mutate(Mutation_MutateServer) error {
	return status.Errorf(codes.Unimplemented, "method Mutate not implemented")
}

func RegisterMutationServer(s *grpc.Server, srv MutationServer) {
	s.RegisterService(&_Mutation_serviceDesc, srv)
}

func _Mutation_Mutate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MutationServer).Mutate(&mutationMutateServer{stream})
}

type Mutation_MutateServer interface {
	Send(*MutationResponse) error
	Recv() (*MutationRequest, error)
	grpc.ServerStream
}

type mutationMutateServer struct {
	grpc.ServerStream
}

func (x *mutationMutateServer) Send(m *MutationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mutationMutateServer) Recv() (*MutationRequest, error) {
	m := new(MutationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Mutation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.service.mutation.v3alpha.Mutation",
	HandlerType: (*MutationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Mutate",
			Handler:       _Mutation_Mutate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "envoy/service/mutation/v3alpha/mutation.proto",
}
